name: Amplify AWS pipeline

on: [push]

env:
  AWS_REGION: us-east-1

jobs:
  deploy:

    runs-on: ubuntu-latest
    # These permissions are needed to interact with GitHub's OIDC Token endpoint.
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Check AWS configuration
      run: |
        echo "AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}"
        echo "AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}"
        echo "AWS_REGION: ${AWS_REGION}"

    - name: Install Amplify CLI
      run: |
        sudo apt-get update
        sudo apt-get install nodejs npm -y
        sudo npm install -g @aws-amplify/cli

    - name: Configure Amplify CLI
      run: amplify configure

# name: GitHub Secret example

# on:
#   push:

# jobs:
#   secrets-in-github-actions:
#     runs-on: ubuntu-latest

#     # The Secrect Actions GitHub example has three steps
#     steps:
#       # Show how to print unmasked GitHub secrets to the console
#       - name: Step 1 - Echo out a GitHub Actions Secret to the logs
#         run: |
#           echo "The GitHub Action Secret will be masked:  "
#           echo ${{ secrets.SECRET_TOKEN }}
#           echo "Trick to echo GitHub Actions Secret:  "
#           echo ${{secrets.SECRET_TOKEN}} | sed 's/./& /g' 

#       # Use a GitHub Actions secret variable in a bash shell
#       - name: Step 2 - GitHub Action if statement (true)
#         env: 
#           WHO_TO_TRUST: ${{ secrets.SECRET_TOKEN }}
#         if:  env.WHO_TO_TRUST == 'TrustNo1'
#         run: echo "I know what the secret token is!"



# name: Frontend CI

# on:
#   push:
#     branches: [ master ]
#   pull_request:
#     branches: [ master, develop ]
#   workflow_dispatch:
#     inputs:
#       version:
#         description: Bump Version
#         default: v1.0.0
#         required: true

# env:
#   REGISTRY: ghcr.io
#   IMAGE_NAME: ${{ github.repository }}

# jobs:
#   build-and-push-image:
#     runs-on: ubuntu-latest
#     permissions:
#       contents: read
#       packages: write

#     strategy:
#       matrix:
#         #node-version: [10.x, 12.x, 14.x, 15.x]
#         node-version: [10.x]

#     steps:
#       - name: ------------------- Checkout repository -------------------
#         uses: actions/checkout@v3

#       - name: ------------------- Check file existence  -------------------
#         id:   check_files
#         uses: andstor/file-existence-action@v2
#         with:
#           files: "package.json"

#       - name: ------------------- Use Node.js ${{ matrix.node-version }}  -------------------
#         uses: actions/setup-node@v3
#         with:
#           node-version: ${{ matrix.node-version }}

#       - name: ------------------- Configure Amplify -------------------
#         uses: ambientlight/amplify-cli-action@0.3.0
#         with:
#           amplify_command: configure
#           amplify_env: prod
#         env:
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           AWS_REGION: us-east-1
          
#       - name: ------------------- Clean install -------------------
#         if: steps.check_files.outputs.files_exists == 'true' 
#         run: npm ci

#       - name: ------------------- Build project -------------------
#         if: steps.check_files.outputs.files_exists == 'true' 
#         run: npm run build --if-present

#       - name: ------------------- Log in to the Container registry  -------------------
#         uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
#         with:
#           registry: ${{ env.REGISTRY }}
#           username: ${{ github.actor }}
#           password: ${{ secrets.GITHUB_TOKEN }}

#       - name: ------------------- Extract metadata (tags, labels) for Docker  -------------------
#         id: meta
#         uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
#         with:
#           images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

#       - name: ------------------- Build and push Docker image -------------------
#         uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
#         with:
#           context: .
#           push: true
#           tags: ${{ steps.meta.outputs.tags }}
#           labels: ${{ steps.meta.outputs.labels }}


